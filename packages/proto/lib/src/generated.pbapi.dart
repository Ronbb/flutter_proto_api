import 'dart:convert' as $convert;
import 'dart:typed_data' as $typed_data;
/// ApiRepository.
final $typed_data.Uint8List apiRepository = $convert.base64Decode('');
